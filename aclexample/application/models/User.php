<?php

/**
 * Model_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
require_once("Base/User.php");
class Model_User extends Model_Base_User
{

    public static function authenticate(array $values)
    {
        if(!count($values)) throw new Exception('Exception trying to authenticate using empty values');
        // Get our authentication adapter and check credentials
        $loginValue=$values['username'];
        $adapter = self::getAuthAdapter('username');        
        $adapter->setIdentity($loginValue);
        $adapter->setCredential($values['password']);
        $auth = Zend_Auth::getInstance();
        $result = $auth->authenticate($adapter);

        if ($result->isValid()) {
            $user = $adapter->getResultRowObject();
            $auth->getStorage()->write($user);
            return true;
        }
        return false;
    }
    /**
    * This function generates a password salt as a string of x (default = 15) characters
    * ranging from a-zA-Z0-9.
    * @param $max integer The number of characters in the string
    */
    public static function generateSalt($max = 15) {
        $characterList = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        $i = 0;
        $salt = "";
        do {
        $salt .= $characterList{mt_rand(0,strlen($characterList)-1)};
        $i++;
        } while ($i <= $max);
        return $salt;
    }

    public static function logOut(){
        Zend_Auth::getInstance()->clearIdentity();
    }

    private static function getAuthAdapter($loginField='username')
    {
        $dbAdapter = Zend_Db_Table::getDefaultAdapter();
        $authAdapter = new Zend_Auth_Adapter_DbTable($dbAdapter);
        $authAdapter->setTableName('user')
        ->setIdentityColumn($loginField)
        ->setCredentialColumn('password')
        ->setCredentialTreatment('MD5(CONCAT(?,salt))');
        return $authAdapter;
    }
}